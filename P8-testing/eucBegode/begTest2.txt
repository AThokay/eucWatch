const buffer = new ArrayBuffer(16);
euc.buff= new ArrayBuffer(36)
euc.buff= new ArrayBuffer([220, 90, 92, 32, 37, 229, 0, 0, 194, 124, 0, 2, 203, 141, 0, 2, 0, 19, 15, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
euc.buff= new Uint8Array([ 220, 165, 92, 32, 37, 226, 0, 0, 194, 129, 0, 2, 203, 146, 0, 2, 0, 0, 18, 179, 10, 200, 0, 0, 2, 70, 10, 240, 4, 32, 0, 3, 0, 0, 0, 0 ]);


euc.buff= new ArrayBuffer(36)
view = new DataView(euc.buff);
view.buffer[0]=1;
data=new Uint8Array([ 220, 165, 92, 32, 37, 226, 0, 0, 194, 129, 0, 2, 203, 146, 0, 2, 0, 0, 18, 179, 10, 200, 0, 0, 2, 70, 10, 240, 4, 32, 0, 3, 0, 0, 0, 0 ]);
euc.buff.set(data, 0);							

view.getUint16(12, true);

new Uint8Array(euc.buff, 0).set(new Uint8Array(data), 10);





new Uint8Array(ab, 0, ab.byteLength).set(new Uint8Array(data), 10);

vet8= euc.buff.getUint8(5, true);
vet16=event.target.value.getUint16(6, true);





Basically the .set(new Uint8Array(buffer,x,y), z); pattern is about as close to a memcpy in JavaScript as you can get


public static int intFromBytesRevBE(byte[] bytes, int starting) {
	if (bytes.length >= starting + 4) {
		return (((bytes[starting+2] & 0xFF) << 24) | ((bytes[starting+3] & 0xFF) << 16) | ((bytes[starting] & 0xFF) << 8) | (bytes[starting+1] & 0xFF));
	}
	return 0;
}


public static int intFromBytesRevBE(byte[] bytes, int starting) {
	if (bytes.length >= starting + 4) {
		return (((bytes[starting+2] & 0xFF) << 24) | ((bytes[starting+3] & 0xFF) << 16) | ((bytes[starting] & 0xFF) << 8) | (bytes[starting+1] & 0xFF));
	}
	return 0;
}



**good:
euc.buff= new ArrayBuffer(36);
euc.buff[6]=1;
euc.buff[7]=158;

euc.buff[12]=202;
euc.buff[13]=146;
euc.buff[14]=0;
euc.buff[15]=2;
print(euc.buff);
inc = (((euc.buff[14] & 0xFF)<< 24) | ((euc.buff[15] & 0xFF)<< 16) | ((euc.buff[12] & 0xFF)<< 8)  | (euc.buff[13]& 0xFF ));
euc.dash.spd=(((euc.buff[6] << 8) | euc.buff[7] ) /10)|0;
view = new DataView(euc.buff);

view.getUint32(12, true);

